# Music web app Route Design Recipe

_Copy this design recipe template to test-drive a plain-text Flask route._

## 1. Design the Route Signature

_Include the HTTP method, the path, and any query or body parameters._

```
# Request:
POST /albums

# With body parameters:
title=Voyage
release_year=2022
artist_id=2

# Expected response (200 OK)
(No content)


# Request:
POST /artists

# With body parameters:
name=Wild nothing
genre=Indie

# Expected response (200 OK)
(No content)

# Then subsequent request:
GET /artists

# Expected response (200 OK)
Pixies, ABBA, Taylor Swift, Nina Simone, Wild nothing

```
## 2. Create Examples as Tests

_Go through each route and write down one or more example responses._

_Remember to try out different parameter values._

_Include the status code and the response body._
```
# POST /albums
#  Parameters:
#   title=Voyage
#   release_year=2022
#   artist_id = 2
#  Expected response (200 OK):
```

```
POST / artists
    #Parameters:
    Name = Wild Nothing
    genre=Indie

    # Expected response (200 OK)
    (No content)

GET /artists
    # Expected response (200 OK)
Pixies, ABBA, Taylor Swift, Nina Simone, Wild nothing

```

## 3. Test-drive the Route

_After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour._

Here's an example for you to start with:

```python

"""
POST /albums
    Parameters:
    title=Voyage
    release_year=2022
    artist_id = 2
    Expected response (200 OK):
"""
def test_post_submit(web_client):
    response = web_client.post('/albums', data={'title': 'Voyage', 'release_year': 2022, 'artist_id': 2})
    assert response.status_code == 200
```